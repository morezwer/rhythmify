version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: rhythmify-postgres
    environment:
      POSTGRES_DB: rhythmify
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/auth-service/migrations:/docker-entrypoint-initdb.d
    networks:
      - rhythmify-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: rhythmify-redis
    ports:
      - "6379:6379"
    networks:
      - rhythmify-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka & Zookeeper (пока закомментируем)
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.4.0
  #   container_name: rhythmify-zookeeper
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   networks:
  #     - rhythmify-network

  # kafka:
  #   image: confluentinc/cp-kafka:7.4.0
  #   container_name: rhythmify-kafka
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #   networks:
  #     - rhythmify-network

  # Auth Service
  auth-service:
    build: 
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: rhythmify-auth
    ports:
      - "8081:8081"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=rhythmify
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - PORT=8081
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rhythmify-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  rhythmify-network:
    driver: bridge